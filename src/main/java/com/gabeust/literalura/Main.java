package com.gabeust.literalura;

import com.gabeust.literalura.service.AuthorService;
import com.gabeust.literalura.service.BookPrinterService;
import com.gabeust.literalura.service.BookService;
import jakarta.annotation.PostConstruct;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Scanner;
/**
 * Componente principal que ejecuta el men√∫ interactivo para la aplicaci√≥n LiterAlura.
 * Permite al usuario buscar y listar libros y autores mediante la consola.
 */
@Component
public class Main {

    private final BookService bookService;
    private final AuthorService authorService;
    private final BookPrinterService printerService;

    public Main(BookService bookService, AuthorService authorService, BookPrinterService printerService) {
        this.bookService = bookService;
        this.authorService = authorService;
        this.printerService = printerService;
    }
    /**
     * M√©todo que se ejecuta autom√°ticamente despu√©s de la creaci√≥n del bean Spring.
     * Muestra un men√∫ en consola con diferentes opciones para interactuar con la aplicaci√≥n.
     *
     * @throws Exception en caso de error general durante la ejecuci√≥n del men√∫.
     */
    @PostConstruct
    public void runMenu() throws Exception {
        Scanner scanner = new Scanner(System.in);
        int option = 0;

        do {
            System.out.println("\n" + "‚ïê".repeat(60));
            System.out.println("üìö Bienvenido/a a LiterAlura üìö");
            System.out.println("‚ïê".repeat(60));
            System.out.println("Seleccione una opci√≥n del men√∫:\n");

            System.out.println("""
                    1Ô∏è‚É£  Buscar libro por t√≠tulo
                    2Ô∏è‚É£  Buscar libros por autor
                    3Ô∏è‚É£  Listar autores registrados
                    4Ô∏è‚É£  Listar libros registrados
                    5Ô∏è‚É£  Libros con autores vivos en un rango de a√±os
                    6Ô∏è‚É£  Listar libros por idioma
                    7Ô∏è‚É£  Top 10 libros m√°s descargados
                    8Ô∏è‚É£  Salir
                    """);

            System.out.print("üëâ Ingrese una opci√≥n: ");
            String input = scanner.nextLine();
            try {
                option = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                System.out.println("‚ùå Opci√≥n no v√°lida. Por favor, ingrese un n√∫mero del 1 al 8.");
                continue;
            }

            System.out.println("\n" + "-".repeat(60));

            switch (option) {
                case 1 -> {
                    System.out.print("üîç Ingrese el t√≠tulo del libro: ");
                    String title = scanner.nextLine();
                    var bookOpt = bookService.findByTitle(title);
                    if (bookOpt.isPresent()) {
                        printerService.printBooks(List.of(bookOpt.get()));
                    } else {
                        System.out.println("üìï No se encontr√≥ ning√∫n libro con ese t√≠tulo.");
                    }
                }
                case 2 -> {
                    System.out.print("‚úçÔ∏è Ingrese el nombre del autor: ");
                    String author = scanner.nextLine();

                    var booksByAuthor = authorService.findByAuthor(author);
                    if (booksByAuthor.isEmpty()) {
                        System.out.println("üìï No se encontraron libros para ese autor.");
                    } else {
                        bookService.saveAllIfNotExists(booksByAuthor);
                        printerService.printBooks(booksByAuthor);
                    }
                }
                case 3 -> {
                    System.out.println("üë• Sus autores registrados:");
                    var authors = authorService.findAll();
                    printerService.printAuthors(authors);
                }
                case 4 -> {
                    System.out.println("üìö Libros registrados:");
                    var books = bookService.findAll();
                    printerService.printBooks(books);
                }
                case 5 -> {
                    System.out.print("üìÖ Ingrese el a√±o de inicio: ");
                    int startYear = Integer.parseInt(scanner.nextLine());
                    System.out.print("üìÖ Ingrese el a√±o de fin: ");
                    int endYear = Integer.parseInt(scanner.nextLine());

                    var books = authorService.findBooksByAuthorsAliveBetween(startYear, endYear);
                    if (books.isEmpty()) {
                        System.out.println("üìï No se encontraron libros con autores vivos en ese rango.");
                    } else {
                        System.out.println("üìö Resultados encontrados:\n");
                        books.forEach(book -> {
                            printerService.printBooks(List.of(book));
                            System.out.println("‚úçÔ∏è Autor(es):");
                            book.authors().forEach(printerService::printAuthor);
                            System.out.println("-".repeat(50));
                        });
                    }
                }
                case 6 -> {
                    System.out.println("üåê Seleccione el idioma:");
                    System.out.println("""
                            1Ô∏è‚É£  Ingl√©s (en)
                            2Ô∏è‚É£  Espa√±ol (es)
                            3Ô∏è‚É£  Franc√©s (fr)
                            4Ô∏è‚É£  Alem√°n (de)
                            5Ô∏è‚É£  Lat√≠n (la)
                            """);
                    System.out.print("üëâ Ingrese una opci√≥n: ");
                    int languageOption = scanner.nextInt();
                    scanner.nextLine(); // limpia buffer

                    String selectedLanguage;
                    switch (languageOption) {
                        case 1 -> selectedLanguage = "en";
                        case 2 -> selectedLanguage = "es";
                        case 3 -> selectedLanguage = "fr";
                        case 4 -> selectedLanguage = "de";
                        case 5 -> selectedLanguage = "la";
                        default -> {
                            System.out.println("‚ö†Ô∏è Opci√≥n no v√°lida. Se usar√° 'en' por defecto.");
                            selectedLanguage = "en";
                        }
                    }

                    var booksByLanguage = bookService.findByLanguage(selectedLanguage);
                    if (booksByLanguage.isEmpty()) {
                        System.out.println("üìï No se encontraron libros en el idioma seleccionado.");
                    } else {
                        printerService.printBooks(booksByLanguage);
                    }
                }
                case 7 -> {
                    System.out.println("üìà Top 10 libros m√°s descargados:");
                    var topBooks = bookService.findTopDownloadedBooks(10);
                    printerService.printBooks(topBooks);
                }
                case 8 -> {
                    System.out.println("\nüëã Gracias por usar LiterAlura. ¬°Hasta luego!");
                }
                default -> System.out.println("‚ùå Opci√≥n no v√°lida.");
            }

            System.out.println("\n" + "=".repeat(60));
            Thread.sleep(2500); // Espera breve para mejorar UX

        } while (option != 8);
    }

}
